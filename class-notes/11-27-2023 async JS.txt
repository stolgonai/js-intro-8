
AJAX:

Ways to handle asynch JS code:
1.Callbacks;
2. Promises;
3. Async Await

setTimeOut() function is used for hard pause for the code. So, we will stay away from it. Instead, we will 
learn implicit wait which is used to wait until a condition happens or up to certain amount of time. 

async key words isnused to define ana async function
await key word is ised to wait for an event till it completed, then it coniues with the next event
await keyword can ony be used with the func that returns PROMISE


 before ES6                                     After ES6
 Callbacks                          Promises                 Async-await
 DO NOT used                        -70%                        -30%

80 min party
-got to Costco -> 20 min
-get meats and vegies   -> 15 min
-cook -> 30 min
-serve -> 10 min
-eat -> 5 min

function goToCostco() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if(carDoesNotBreak) resolve();
            else reject();
        }, 20000);
    });
}

function getMeat() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if(meatAvailable) resolve();
            else reject();
        }, 15000);
    });
}

function cook() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if(gasAvailable) resolve();
            else reject();
        }, 30000);
    });
}

function serve() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if(noIssues) resolve();
            else reject();
        }, 10000);
    });
}

function eat() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if(noProblem) resolve();
            else reject();
        }, 5000);
    });
}

//
async function test() {
    try {
        await goToCostco();
        await getMeat();
        await cook();
        await serve();
        await eat();
    } catch(err) {
        console.log(err);
    }
}

test();




EROR -HANDLING
Error:Unexpected result of a running program

There are 2 types of errors:
1. Syntax error: due to missspelling or typo in the code
    sample: setTimeOut ==> setTimeout
2. Runtime error: this type of error, happen due to a logical mistake by programmer or system issue may caused it    


try-catch-finally block
-We will use try for block of code that could possibly throw an error;
-catch block is uesd to catch if any error happens in the try block and customize the error;
catch block will be executed ONLY IF there is an EROR;
-try block cann not be used alone, it requres either catch or finally or both.
-catch or finally blocks cannot be used without try block.
-finally block is always is executed in case of error or not;


throw keyword:
-this keyword is used to throw a custom error intentionally
sample:
function giveMePositiveNum(num){
if(num > 0) console.log("Thanks! ", num)
else throw new Error("Bad guy!! Give the positive num", 0)
}


